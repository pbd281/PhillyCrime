#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Aug 17 10:19:43 2017

This script analyzes Philly Crime data from Open Data Philly

@author: peterdannemann
"""

# Import the packages used in this script.
import IPython
from IPython.display import HTML, display

import pandas as pd # dataframe
import numpy as np # linear algebra
import os
import matplotlib.pyplot as plt # plotting
import datetime
import seaborn as sns # fancy plots

from mpl_toolkits.basemap import Basemap
from matplotlib import animation

import geopandas as gpd
from geopandas.tools import sjoin
from geopandas import GeoDataFrame
from shapely.geometry import Point

from bokeh.plotting import figure, save, show
from bokeh.models import ColumnDataSource, HoverTool, LinearColorMapper
import pysal as ps
from bokeh.palettes import RdYlBu11 as palette

def getPolyCoords(row, geom, coord_type):
    """Returns the coordinates ('x' or 'y') of edges of a Polygon exterior"""

    # Parse the exterior of the coordinate
    exterior = row[geom].exterior

    if coord_type == 'x':
        # Get the x coordinates of the exterior
        return list( exterior.coords.xy[0] )
    elif coord_type == 'y':
        # Get the y coordinates of the exterior
        return list( exterior.coords.xy[1] )

#init_notebook_mode(connected=True)

pd.options.display.max_columns = 999
os.chdir('/Users/pbd28/OneDrive/Programming/Python/PhillyCrime')

df = pd.read_csv('incidents_part1_part2.csv', delimiter=',')

#print(df.columns)
#
#df['dispatch_date_time'] = pd.to_datetime(df['dispatch_date_time'])
#df['Month'] = df['dispatch_date_time'].dt.month
#df['Year'] = df['dispatch_date_time'].dt.year
#
# Let's start with a list of our unique types of crimes
crime_types = list(df['text_general_code'].unique())
#print('Types of Crimes:')
#for i in range(len(crime_types)):
#    print(crime_types[i])
#print('Number of Types of Crimes: ' + str(i))
# A lot of these types of crimes are pretty similar, let's group the similar
# ones together
# Our categories for crime types will be:
    # Violent_Crime, Theft, and Other
crimes_dict = {
              'Vandalism/Criminal Mischief': 'Theft',
              'Robbery Firearm': 'Theft',
              'Thefts': 'Theft',
              'Other Assaults': 'Violent_Crime',
              'Theft from Vehicle': 'Theft',
              'Fraud': 'Theft',
              'Aggravated Assault No Firearm': 'Violent_Crime',
              'Burglary Non-Residential': 'Theft',
              'Forgery and Counterfeiting': 'Theft',
              'Disorderly Conduct': 'Other',
              'Burglary Residential': 'Theft',
              'All Other Offenses': 'Other',
              'Aggravated Assault Firearm': 'Violent_Crime',
              'Robbery No Firearm': 'Theft',
              'Narcotic / Drug Law Violations': 'Other',
              'Vagrancy/Loitering': 'Other',
              'Other Sex Offenses (Not Commercialized)': 'Other',
              'Arson': 'Other',
              'Rape': 'Other',
              'Recovered Stolen Motor Vehicle':'Theft',
              'Liquor Law Violations': 'Other',
              'Weapon Violations': 'Violent_Crime',
              'Public Drunkenness': 'Other',
              'Embezzlement': 'Other',
              'Prostitution and Commercialized Vice': 'Other',
              'Receiving Stolen Property': 'Other',
              'Offenses Against Family and Children': 'Other',
              'Gambling Violations': 'Other',
              'DRIVING UNDER THE INFLUENCE': 'Other',
              'Motor Vehicle Theft': 'Theft',
              'Homicide - Criminal': 'Violent_Crime',
              'Homicide - Criminal': 'Violent_Crime',
              'Homicide - Justifiable': 'Violent_Crime', 
              'Homicide - Gross Negligence': 'Violent_Crime'
              }
df['Crime_Category'] = df['text_general_code'].map(crimes_dict)

## create a value column with a 1 for easy counting when aggregating
#df['Value'] = 1
#
#crime_category_count = df.groupby(['Crime Category'])['Value'].sum()
#display(crime_category_count)
#
#crime_count = df.groupby(['text_general_code'])['Value'].sum()
#crime_count = crime_count.sort_values(ascending=False).reset_index()
#
#district_count = df.groupby(['dc_dist'])['Value'].sum().reset_index()
#
#year_count = df.groupby(['Year'])['Value'].sum().reset_index()
#
#month_count = df.groupby(['Month'])['Value'].sum().reset_index()
#
#time_count = df.groupby(['hour_'])['Value'].sum().reset_index()
#
#fig1, ax1 = plt.subplots(figsize=(15,5))
#x1 = range(len(crime_count['Value']))
#x1_tick_labels = crime_count['text_general_code']
#y1 = crime_count['Value']
#ax1.bar(x1, y1)
#ax1.set_xticks(x1)
#ax1.set_xticklabels(x1_tick_labels, rotation='vertical', fontsize=12)
#ax1.set_title('Number of Crimes by Type of Crime', fontsize = 18)
#ax1.set_ylabel('Number of Crimes')
#
#fig2, ax2 = plt.subplots(figsize=(15,5))
#x2 = range(len(district_count['Value']))
#x2_tick_labels = district_count['dc_dist']
#y2 = district_count['Value']
#ax2.bar(x2, y2)
#ax2.set_xticks(x2)
#ax2.set_xticklabels(x2_tick_labels, fontsize=12)
#ax2.set_title('Number of Crimes by Police District', fontsize=18)
#ax2.set_xlabel('Police District')
#ax2.set_ylabel('Number of Crimes')
#
#fig3, ax3 = plt.subplots(figsize=(15,5))
#x3 = range(len(year_count['Year']))
#x3_tick_labels = year_count['Year']
#y3 = year_count['Value']
#ax3.bar(x3, y3)
#ax3.set_xticks(x3)
#ax3.set_xticklabels(x3_tick_labels, fontsize=12)
#ax3.set_title('Number of Crimes by Year', fontsize=18)
#ax3.set_xlabel('Year')
#ax3.set_ylabel('Number of Crimes')
#
#fig4, ax4 = plt.subplots(figsize=(15,5))
#x4 = range(len(month_count['Month']))
#x4_tick_labels = ['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep','Oct','Nov','Dec']
#y4 = month_count['Value']
#ax4.bar(x4, y4)
#ax4.set_xticks(x4)
#ax4.set_xticklabels(x4_tick_labels, fontsize=12)
#ax4.set_title('Number of Crimes by Month', fontsize=18)
#ax4.set_xlabel('Month')
#ax4.set_ylabel('Number of Crimes')
#
#fig5, ax5 = plt.subplots(figsize=(15,5))
#x5 = range(len(time_count['hour_']))
#x5_tick_labels = time_count['hour_']
#y5 = time_count['Value']
#ax5.bar(x5, y5)
#ax5.set_xticks(x5)
#ax5.set_xticklabels(x5_tick_labels, fontsize=12)
#ax5.set_title('Number of Crimes by Time', fontsize=18)
#ax5.set_xlabel('Time (Hour)')
#ax5.set_ylabel('Number of Crimes')

# geospatial analysis

os.chdir('/Users/pbd28/OneDrive/Programming/Python/PhillyCrime/Shapefiles/PoliceDistricts')

districts = gpd.GeoDataFrame.from_file(
    'Boundaries_District.shp')
#districts.plot()

os.chdir('/Users/pbd28/OneDrive/Programming/Python/PhillyCrime/Shapefiles/Neighborhoods_WGS84')

neighborhoods = gpd.GeoDataFrame.from_file(
        'Neighborhoods_WGS84.shp')
# convert neighborhoods from feet to lat/lon

#neighborhoods.plot()

# convert our dataframe into a geodataframe
# this is necessary for joining our data to our shapefiles
clean_geo_df = df.dropna(subset=['lat', 'lng'])

geometry = [Point(xy) for xy in zip(clean_geo_df.lng, clean_geo_df.lat)]
clean_geo_df = clean_geo_df.drop(['lng', 'lat'], axis=1)
crs = {'init': 'epsg:4326'}
geo_df = GeoDataFrame(clean_geo_df, crs=crs, geometry=geometry)
neighborhoods.crs = geo_df.crs
# spatial join our points to our neighborhoods
pointInPolys = sjoin(geo_df, neighborhoods, how='left', op='within')
pointSumByPoly = pointInPolys.groupby(['LISTNAME', 'Crime_Category'])['objectid'].agg(['count']).reset_index()
# reshape pointSumByPoly to allow for easier merging with the neighborhoods shapefile
pointSumByPoly = pointSumByPoly.pivot(index='LISTNAME', columns='Crime_Category', values='count').reset_index()

#pointSumByPoly = pointInPolys.groupby(['LISTNAME', 'text_general_code'])['objectid'].agg(['count']).reset_index()
## reshape pointSumByPoly to allow for easier merging with the neighborhoods shapefile
#pointSumByPoly = pointSumByPoly.pivot(index='LISTNAME', columns='text_general_code', values='count').reset_index()


neighborhoods = pd.merge(neighborhoods, pointSumByPoly, on = 'LISTNAME')
# Create a column for the sum of the crimes
neighborhoods['Total'] = neighborhoods['Violent_Crime'] + neighborhoods['Theft'] + neighborhoods['Other']

# Create a column for the crimes per square foot
neighborhoods['Total_SF'] = neighborhoods['Total'] / neighborhoods['Shape_Area']

# Get the Polygon x and y coordinates
neighborhoods['x'] = neighborhoods.apply(getPolyCoords, geom='geometry', coord_type='x', axis=1)
neighborhoods['y'] = neighborhoods.apply(getPolyCoords, geom='geometry', coord_type='y', axis=1)

# Classify our total crime into 4 classes
# Create a list of values where minumum value is 0, maximum value is 40000 and step is 10000.
breaks = [x for x in range(0, 50000, 10000)]

classifier = ps.User_Defined.make(bins=breaks)
crime_classif = neighborhoods[['Total_SF']].apply(classifier)

# Rename columns
crime_classif.columns = ['Total_ud']

# Join back to main data
neighborhoods = neighborhoods.join(crime_classif)

# Create names for the legend (until 40000 crimes)
upper_limit = 40000
step = 10000
# This will produce: ["0-10000", "10000-20000", "30000-40000", "40000 <"]
names = ["%s-%s " % (x-10000, x) for x in range(0, 50000, step)]
## Add legend label for over 40000
names.append("< %s" % upper_limit)

# Assign legend names for the classes
neighborhoods['label_pt'] = None

for i in range(len(names)):
    # Update rows where class is i
    neighborhoods.loc[neighborhoods['Total_ud'] == i, 'label_pt'] = names[i]

## Update all cells that didn't get any value with "60000 <"
#neighborhoods['label_pt'] = neighborhoods['label_pt'].fillna("< %s" % upper_limit)

# Make a copy, drop the unused columns and create ColumnDataSource
n_df = neighborhoods.drop(['geometry', 'NAME', 'MAPNAME', 'Shape_Leng', 'Shape_Area'], axis=1).copy()
gsource = ColumnDataSource(n_df)

TOOLS = "pan,wheel_zoom,box_zoom,reset,save"

# Create the color mapper
color_mapper = LinearColorMapper(palette=palette)

# Initialize our figure
p = figure(title="Number of Crimes in Philadelphia by Neighborhood from 2006-2017", tools=TOOLS, 
           plot_width=650, plot_height=650, active_scroll = "wheel_zoom")

# Do not add grid line 
p.grid.grid_line_color = None

# Plot grid and legend
grid = p.patches('x', 'y', source=gsource,
         fill_color={'field': 'Total_SF', 'transform': color_mapper},
         fill_alpha=1.0, line_color="black", line_width=0.05, legend="label_pt")

# Modify legend location
p.legend.location = "bottom_right"
p.legend.orientation = "vertical"

# Add a hover tools for the data
ghover = HoverTool(renderers=[grid])
ghover.tooltips=[("Neighborhood", "@LISTNAME"),
                 ("Theft", "@Theft"),
                 ("Other", "@Other"),
                 ("Violent Crimes", "@Violent_Crime"),
                 ("Total Crimes", "@Total_SF"),
               ]

p.add_tools(ghover)
# Show the figure
show(p)

#m = Basemap(projection='aea', llcrnrlat=df.lat.min(), urcrnrlat=df.lat.max(), 
#            llcrnrlon=df.lng.min(), urcrnrlon=df.lng.max(), resolution='c', epsg=4269)
#plt.figure(figsize=(20,10))
#m.arcgisimage(service="World_Street_Map", xpixels=3000, verbose=False)
#m.readshapefile('Boundaries_District','Boundaries_District', drawbounds = True)
#
## find the coords of the center of each district to use as labels
#g, lat, lng = [], [], []
#for i in range(len(sf['location'])):
#    geocode = geocoder.google(str(str(sf['location'][i]) + ' Philadelphia, PA'))
#    g.append(geocode.latlng)
#for i in range(len(g)):
#    lat.append(g[i][0])
#    lng.append(g[i][1])
#dist_num = list(sf['dist_num'])
#plt.text(lat, lng, dist_num, fontsize=48)
